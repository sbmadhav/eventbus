/** Event Bus is a class that is used to implement a common flavor of Observer design pattern call publish-subscribe model.
 *	public apis : add, remove and trigger
 *	Usage:
 *
 *		var eventBus = new EventBus();
 *	// To Add or Subscribe to a new topic
 *		eventBus.add('myEvent1',function(){console.log('hi')},function(){console.log('bye')});
 *	// To Trigger an existing topic
 *		eventBus.trigger('myEvent1')
 *	// To Remove an existing topic
 *		eventBus.remove( 'myEvent1',function(){console.log('hi')}); 
 *	// Or 
 *		eventBus.remove( 'myEvent1');
 *  License (MIT)
*/ 
!function(t){"use strict";t.EventBus=function(){var t={};this.add=function(n){if(n&&"string"==typeof n&&arguments.length>1){t[n]=t[n]||[];for(var r=1;r<arguments.length;r++)t[n].push(arguments[r]);return!0}return!1},this.remove=function(n){if(n&&"string"==typeof n&&t[n]){if(1===arguments.length)return delete t[n],!0;for(var r=0;r<arguments.length;r++)for(var e=0;e<t[n].length;e++)if(t[n][e].toString()===arguments[r].toString()){t[n].splice(e,1);break}return!0}return!1},this.trigger=function(n,r){return t[n]?(t[n].map(function(t){t(r)}),!0):!1}}}(window);
