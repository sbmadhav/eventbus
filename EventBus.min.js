/** Event Bus is a class that is used to implement a common flavor of Observer design pattern call publish-subscribe model.
 *	public apis : add, remove and trigger
 *	Usage:
 *
 *		var eventBus = new EventBus();
 *	// To Add or Subscribe to a new topic
 *		eventBus.add('myEvent1',function(){console.log('hi')},function(){console.log('bye')});
 *	// To Trigger an existing topic
 *		eventBus.trigger('myEvent1')
 *	// To Remove an existing topic
 *		eventBus.remove( 'myEvent1',function(){console.log('hi')}); 
 *	// Or 
 *		eventBus.remove( 'myEvent1');
 *  License (MIT)
*/ 
!function(a){a.EventBus=function(){var a={};this.add=function(b){if(a[b]=a[b]||[],b&&"string"==typeof b&&arguments.length>1){for(var c=1;c<arguments.length;c++)a[b].push(arguments[c]);return!0}return!1},this.remove=function(b){if(b&&"string"==typeof b&&a[b]){if(1===arguments.length)return delete a[b],!0;for(var c=0;c<arguments.length;c++)for(var d=0;d<a[b].length;d++)if(a[b][d].toString()===arguments[c].toString()){a[b].splice(d,1);break}return!0}return!1},this.trigger=function(b,c){return a[b]?(a[b].map(function(a){a(c)}),!0):!1}}}(window);
